#lang racket

(define (prime-sum-pairs n)
	(map
		make-pair-sum
		(filter prime-sum? (unique-pairs n))
	)
)

(define (unique-pairs n)
	(accumulate
		append
		null
		(map
			(lambda (i)
				(map
					(lambda (j)
						(list j i)
					)
					(enumerate-interval 1 (- i 1))
				)
			)
			(enumerate-interval 1 n)
		)
	)
)

(define (make-pair-sum pair)
	(list (car pair) (cadr pair) (+ (car pair) (cadr pair)))
)

(define (prime-sum? pair)
	(prime? (+ (car pair) (cadr pair)))
)

(define (prime? n)
	(= n (smallest-divisor n))
)

(define (smallest-divisor n)
	(find-divisor n 2)
)

(define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
		((divides? test-divisor n) test-divisor)
		(else
			(find-divisor n (+ test-divisor 1))
		)
	)
)

(define (divides? a b)
	(= (remainder b a) 0)
)

(define (square x)
	(* x x)
)

(define (enumerate-interval low high)
	(if (> low high)
		null
		(cons low (enumerate-interval (+ low 1) high))
	)
)

(define (accumulate op initial sequence)
	(if (null? sequence)
		initial
		(op (car sequence) (accumulate op initial (cdr sequence)))
	)
)

; Tests

Welcome to DrRacket, version 6.11 [3m].
Language: racket, with debugging; memory limit: 128 MB.
> (unique-pairs 10)
'((1 2)
  (1 3)
  (2 3)
  (1 4)
  (2 4)
  (3 4)
  (1 5)
  (2 5)
  (3 5)
  (4 5)
  (1 6)
  (2 6)
  (3 6)
  (4 6)
  (5 6)
  (1 7)
  (2 7)
  (3 7)
  (4 7)
  (5 7)
  (6 7)
  (1 8)
  (2 8)
  (3 8)
  (4 8)
  (5 8)
  (6 8)
  (7 8)
  (1 9)
  (2 9)
  (3 9)
  (4 9)
  (5 9)
  (6 9)
  (7 9)
  (8 9)
  (1 10)
  (2 10)
  (3 10)
  (4 10)
  (5 10)
  (6 10)
  (7 10)
  (8 10)
  (9 10))
> (prime-sum-pairs 10)
'((1 2 3)
  (2 3 5)
  (1 4 5)
  (3 4 7)
  (2 5 7)
  (1 6 7)
  (5 6 11)
  (4 7 11)
  (6 7 13)
  (3 8 11)
  (5 8 13)
  (2 9 11)
  (4 9 13)
  (8 9 17)
  (1 10 11)
  (3 10 13)
  (7 10 17)
  (9 10 19))
> (unique-pairs 1)
'()
> (prime-sum-pairs 1)
'()
> (unique-pairs 2)
'((1 2))
> (prime-sum-pairs 2)
'((1 2 3))
> (unique-pairs 3)
'((1 2) (1 3) (2 3))
> (prime-sum-pairs 3)
'((1 2 3) (2 3 5))
> (unique-pairs 4)
'((1 2) (1 3) (2 3) (1 4) (2 4) (3 4))
> (prime-sum-pairs 4)
'((1 2 3) (2 3 5) (1 4 5) (3 4 7))
> (unique-pairs 5)
'((1 2) (1 3) (2 3) (1 4) (2 4) (3 4) (1 5) (2 5) (3 5) (4 5))
> (prime-sum-pairs 5)
'((1 2 3) (2 3 5) (1 4 5) (3 4 7) (2 5 7))
> 
