#lang racket

(define (sum-of-triples n s)
	; n is the upper limit for i, j and k
	; s is the desired sum
	(define (sums-to-s? triple)
		(= s (+ (car triple) (car (cdr triple)) (car (cdr (cdr triple)))))
	)
	(filter sums-to-s? (ordered-triples n))
)

(define (ordered-triples n)
	(flatmap
		(lambda (i)
			(flatmap
				(lambda (j)
					(map
						(lambda (k)
							(list k j i)
						)
						(enumerate-interval 1 (- j 1))
					)
				)
				(enumerate-interval 1 (- i 1))
			)
		)
		(enumerate-interval 1 n)
	)
)

(define (flatmap proc seq)
	(accumulate append null (map proc seq))
)

(define (enumerate-interval low high)
	(if (> low high)
		null
		(cons low (enumerate-interval (+ low 1) high))
	)
)

(define (accumulate op initial sequence)
	(if (null? sequence)
		initial
		(op (car sequence) (accumulate op initial (cdr sequence)))
	)
)

; Tests

Welcome to DrRacket, version 6.11 [3m].
Language: racket, with debugging; memory limit: 128 MB.
> (ordered-triples 5)
'((1 2 3) (1 2 4) (1 3 4) (2 3 4) (1 2 5) (1 3 5) (2 3 5) (1 4 5) (2 4 5) (3 4 5))
> (ordered-triples 4)
'((1 2 3) (1 2 4) (1 3 4) (2 3 4))
> (ordered-triples 3)
'((1 2 3))
> (ordered-triples 2)
'()
> (ordered-triples 6)
'((1 2 3)
  (1 2 4)
  (1 3 4)
  (2 3 4)
  (1 2 5)
  (1 3 5)
  (2 3 5)
  (1 4 5)
  (2 4 5)
  (3 4 5)
  (1 2 6)
  (1 3 6)
  (2 3 6)
  (1 4 6)
  (2 4 6)
  (3 4 6)
  (1 5 6)
  (2 5 6)
  (3 5 6)
  (4 5 6))
> (sum-of-triples 6 9)
'((2 3 4) (1 3 5) (1 2 6))
> (ordered-triples 10)
'((1 2 3)
  (1 2 4)
  (1 3 4)
  (2 3 4)
  (1 2 5)
  (1 3 5)
  (2 3 5)
  (1 4 5)
  (2 4 5)
  (3 4 5)
  (1 2 6)
  (1 3 6)
  (2 3 6)
  (1 4 6)
  (2 4 6)
  (3 4 6)
  (1 5 6)
  (2 5 6)
  (3 5 6)
  (4 5 6)
  (1 2 7)
  (1 3 7)
  (2 3 7)
  (1 4 7)
  (2 4 7)
  (3 4 7)
  (1 5 7)
  (2 5 7)
  (3 5 7)
  (4 5 7)
  (1 6 7)
  (2 6 7)
  (3 6 7)
  (4 6 7)
  (5 6 7)
  (1 2 8)
  (1 3 8)
  (2 3 8)
  (1 4 8)
  (2 4 8)
  (3 4 8)
  (1 5 8)
  (2 5 8)
  (3 5 8)
  (4 5 8)
  (1 6 8)
  (2 6 8)
  (3 6 8)
  (4 6 8)
  (5 6 8)
  (1 7 8)
  (2 7 8)
  (3 7 8)
  (4 7 8)
  (5 7 8)
  (6 7 8)
  (1 2 9)
  (1 3 9)
  (2 3 9)
  (1 4 9)
  (2 4 9)
  (3 4 9)
  (1 5 9)
  (2 5 9)
  (3 5 9)
  (4 5 9)
  (1 6 9)
  (2 6 9)
  (3 6 9)
  (4 6 9)
  (5 6 9)
  (1 7 9)
  (2 7 9)
  (3 7 9)
  (4 7 9)
  (5 7 9)
  (6 7 9)
  (1 8 9)
  (2 8 9)
  (3 8 9)
  (4 8 9)
  (5 8 9)
  (6 8 9)
  (7 8 9)
  (1 2 10)
  (1 3 10)
  (2 3 10)
  (1 4 10)
  (2 4 10)
  (3 4 10)
  (1 5 10)
  (2 5 10)
  (3 5 10)
  (4 5 10)
  (1 6 10)
  (2 6 10)
  (3 6 10)
  (4 6 10)
  (5 6 10)
  (1 7 10)
  (2 7 10)
  (3 7 10)
  (4 7 10)
  (5 7 10)
  (6 7 10)
  (1 8 10)
  (2 8 10)
  (3 8 10)
  (4 8 10)
  (5 8 10)
  (6 8 10)
  (7 8 10)
  (1 9 10)
  (2 9 10)
  (3 9 10)
  (4 9 10)
  (5 9 10)
  (6 9 10)
  (7 9 10)
  (8 9 10))
> (sum-of-triples 10 27)
'((8 9 10))
> (sum-of-triples 10 26)
'((7 9 10))
> (sum-of-triples 10 25)
'((7 8 10) (6 9 10))
> (sum-of-triples 10 24)
'((7 8 9) (6 8 10) (5 9 10))
> (sum-of-triples 10 23)
'((6 8 9) (6 7 10) (5 8 10) (4 9 10))
> (ordered-triples 5)
'((1 2 3) (1 2 4) (1 3 4) (2 3 4) (1 2 5) (1 3 5) (2 3 5) (1 4 5) (2 4 5) (3 4 5))
> (sum-of-triples 5 6)
'((1 2 3))
> (sum-of-triples 5 7)
'((1 2 4))
> (sum-of-triples 5 8)
'((1 3 4) (1 2 5))
> (sum-of-triples 5 9)
'((2 3 4) (1 3 5))
> (sum-of-triples 5 10)
'((2 3 5) (1 4 5))
> (sum-of-triples 5 11)
'((2 4 5))
> (sum-of-triples 5 12)
'((3 4 5))
> (sum-of-triples 5 13)
'()
> 
